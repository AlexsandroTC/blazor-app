@page "/login"
@using System.Security.Claims
@using BlazorApp.Providers
@using BlazorApp.ViewModel
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager navigationManager
@inject CustomAuthenticationStateProvider AuthProvider

<h3>LoginPage</h3>
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>

            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username"></InputText>
                <ValidationMessage For="() => Model.UserName" />
            </div>
            
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control"></InputText>
                <ValidationMessage For="() => Model.Password" />
            </div>
            
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] 
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;
    
    private async Task Authenticate()
    {
        if (!string.IsNullOrWhiteSpace(Model.UserName) && !string.IsNullOrWhiteSpace(Model.Password))
        {
            AuthProvider.MarkUserAsAuthenticated("alexsandro");
            navigationManager.NavigateTo("/");
        }
    }
}